#!/usr/bin/env python3

import argparse
import json

import AssemblerOutput
import RunlengthEncoder


def write_parts(output_file_name, parts, name, assembler_format):
    with open(output_file_name, "w") as output_file:
        output = AssemblerOutput.AssemblerOutput(assembler_format, output_file)
        output.header(input_file_name)
        output.data_section()
        output.parts(name, parts)


parser = argparse.ArgumentParser(description='Runlength encode screen data.')

parser.add_argument("input_file")
parser.add_argument("output_file")
args = parser.parse_args()

input_file_name = args.input_file
output_file_name = args.output_file

if input_file_name.endswith(".bin"):
    encoder = RunlengthEncoder.RunlengthEncoder()
    with open(input_file_name, "rb") as input_file:
        while byte := input_file.read(1):
            encoder.add(byte)

    compressed = encoder.end()
    with open(output_file_name, "wb") as output_file:
        output_file.write(compressed)
elif input_file_name.endswith(".json"):
    with open(input_file_name, "r") as json_file:
        spec = json.load(json_file)

        screen_width = spec.get("screen_width", 0)
        width = spec.get("width", 0)
        height = spec.get("width", 0)
        assembler_format = spec.get("assembler", "z88dk")
        skip = max(screen_width - width, 0)

        parts = []
        encoder = RunlengthEncoder.RunlengthEncoder()
        with open(spec["input_file"], "rb") as input_file:
            x = 0
            y = 0
            while byte := input_file.read(1):
                encoder.add(byte)
                if width > 0:
                    x += 1
                    if x == width:
                        x = 0
                        if height > 0:
                            y += 1
                            if y == height:
                                parts.append(encoder.end())
                                y = 0
                                continue
                        encoder.skip(skip)
        rest = encoder.end()
        if len(rest) > 2:
            parts.append(rest)

        write_parts(output_file_name, parts, spec["name"], assembler_format)

else:
    raise RuntimeError("unsupported file format")
