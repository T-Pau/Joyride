#!/usr/bin/env python3

"""
  key-table -- Create table of key position / size
  Copyright (C) 2020 Dieter Baron

  This file is part of Anykey, a keyboard test program for C64.
  The authors can be contacted at <anykey@tpau.group>.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. The names of the authors may not be used to endorse or promote
     products derived from this software without specific prior
     written permission.

  THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS
  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""


import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, "Toolkit", "python-packages")))

import argparse

import AtomicOutput
import Dependencies


def write_word_table(tablename, table, fout):
    fout.write(f".public {name}_{tablename}_low:\n");
    for value in table:
        fout.write("    .data <(" + value + ")\n")
    fout.write("\n")
    fout.write(f".public {name}_{tablename}_high:\n");
    for value in table:
        fout.write("    .data >(" + value + ")\n")
    fout.write("\n")


parser = argparse.ArgumentParser(description='Create key table.')

parser.add_argument("input_file")
parser.add_argument("output_file")
parser.add_argument("-M", metavar="FILE", dest="depfile", help="output dependency information to FILE")
args = parser.parse_args()

program = sys.argv[0]
input_file_name = args.input_file
output_file_name = args.output_file

output = AtomicOutput.AtomicOutput()

output.set_filename(output_file_name)
dependencies = Dependencies.Dependencies(args.depfile, output_file_name)

keys_address = []
keys_size = []

name = ""
offset = 0
key_width = 1
key_height = 1
screen_width = 40
screen_address = "screen"

with open(input_file_name) as fin:
    for line in fin:
        comment = line.find(";")
        if comment > -1:
            line = line[0:comment]
        line.strip()
        words = line.split()
        if len(words) == 0:
            continue
        if words[0] == "name":
            if len(words) != 2:
                raise "wrong number of arguments for 'name'"
            name = words[1]
        elif words[0] == "offset":
            if len(words) != 2:
                raise "wrong number of arguments for 'offset'"
            offset = int(words[1])
        elif words[0] == "key_width":
            if len(words) != 2:
                raise "wrong number of arguments for 'key_width'"
            key_width = int(words[1])
        elif words[0] == "key_height":
            if len(words) != 2:
                raise "wrong number of arguments for 'key_height'"
            key_height = int(words[1])
        elif words[0] == "screen_width":
            if len(words) != 2:
                raise "wrong number of arguments for 'screen_width'"
            screen_width = int(words[1])
        elif words[0] == "screen_address":
            if len(words) < 2:
                raise "wrong number of arguments for 'screen_address'"
            screen_address = " ".join(words[1:])
        elif words[0] == "key":
            if len(words) != 4:
                raise "wrong number of arguments for 'key'"
            keys_address.append(f"{screen_address} + " + str(offset + int(words[1]) * key_width + int(words[2]) * key_height * screen_width))
            keys_size.append("display_key_" + words[3])
        else:
            raise "unknown command '" + words[0] + "'"

fout = output.get_file()

num_keys = len(keys_address)

print(f"""; {output_file_name} -- keyboard layout {name}

; This file is automatically created by {program} from {input_file_name}.
; Do not edit.

.section data

.public {name}_num_keys {{
    .data {num_keys}
}}

{name}_keys {{
""", file=fout)

write_word_table("address", keys_address, fout)
write_word_table("display", keys_size, fout)

print("}", file=fout)

output.close()
dependencies.write()
