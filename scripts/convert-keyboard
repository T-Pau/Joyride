#!/usr/bin/env python3

"""
  convert-keyboard -- Convert keyboard bitmap to charsets.
  Copyright (C) 2020-2022 Dieter Baron

  This file is part of Anykey, a keyboard test program for C64.
  The authors can be contacted at <anykey@tpau.group>.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. The names of the authors may not be used to endorse or promote
     products derived from this software without specific prior
     written permission.

  THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS
  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import sys
import toml

import AssemblerOutput
import RunlengthEncoder


class Charset:
    def __init__(self, size, empty):
        self.by_index = dict()
        self.by_value = dict()
        self.next_index = 0
        self.size = size
        self.empty = empty

    def add(self, value):
        if value in self.by_value:
            return self.by_value[value]
        else:
            index = self.get_next_index()
            self.by_value[value] = index
            self.by_index[index] = value
            return index

    def add_with_index(self, value, index):
        if index in self.by_index:
            raise RuntimeError(f"character {index} already set")
        else:
            self.by_index[index] = value
            self.by_value[value] = index

    def get_next_index(self):
        while self.next_index in self.by_index:
            self.next_index += 1
            if self.next_index >= self.size:
                raise RuntimeError("out of characters")
        return self.next_index

    def get_values(self, index):
        if index in self.by_index:
            return self.by_index[index]
        else:
            return self.empty


def mirror(char):
    # 76543310
    # 01234567
    mirrored = (char & 0x0101010101010101) << 7
    mirrored |= (char & 0x0202020202020202) << 5
    mirrored |= (char & 0x0404040404040404) << 3
    mirrored |= (char & 0x0808080808080808) << 1
    mirrored |= (char & 0x1010101010101010) >> 1
    mirrored |= (char & 0x2020202020202020) >> 3
    mirrored |= (char & 0x4040404040404040) >> 5
    mirrored |= (char & 0x8080808080808080) >> 7
    return mirrored


def setup_charset(charset, config, top):
    charset.add_with_index((0, 0xffffffffffffffff), 32)
    if top:
        if "rounded_top" in config:
            char_left = config["rounded_top"]
            char_right = mirror(char_left)
            charset.add_with_index((char_left, char_left), 0x49)
            charset.add_with_index((char_right, char_right), 0x4a)
    if not top or "top_lines" not in config:
        if "rounded_bottom" in config:
            char_left = config["rounded_bottom"]
            char_right = mirror(char_left)
            charset.add_with_index((char_left, char_left), 0x4b)
            charset.add_with_index((char_right, char_right), 0x4c)
        if "line_bottom" in config:
            char = config["line_bottom"]
            charset.add_with_index((char, char), 0x4d)


def save_charset_half(charset, file, index, full):
    count = 128 if full else max(charset.by_index.keys()) + 1
    for i in range(0, count):
        pair = charset.get_values(i)
        print("\t.byte $", file=file, end="")  # ", $"
        print(", $".join("{:02x}".format(x) for x in pair[index].to_bytes(8, byteorder="big")), file=file)


def save_charset(charset, file, symbol_prefix):
    full = config["full_charset"] if "full_charset" in config else False
    print(f".export {symbol_prefix}", file=file)
    if not full:
        print(f".export {symbol_prefix}_inv", file=file)
    print(f"{symbol_prefix}:", file=file)
    save_charset_half(charset, file, 0, full)
    if not full:
        print(f"{symbol_prefix}_inv:", file=file)
    save_charset_half(charset, file, 1, full)


def save(data, name):
    with open(name, mode="wb") as file:
        file.write(data)


if len(sys.argv) != 2:
    print("usage: ", sys.argv[0], " config.toml\n")
    sys.exit(1)

config = toml.load(sys.argv[1])

screen = b""

with open(config["charset"], mode='w') as file_charset:
    with open(config["normal_bitmap"], mode='rb') as file_normal:
        with open(config["pressed_bitmap"], mode='rb') as file_pressed:
            if "segment" in config:
                segment = config["segment"]
                print(f".segment \"{segment}\"", file=file_charset)
            else:
                print(".section data", file=file_charset)
            for y in range(0, config["height"]):
                if y == 0:
                    charset = Charset(128, (0, 0))
                    setup_charset(charset, config, True)
                if "top_lines" in config and y == config["top_lines"]:
                    # print("------")
                    save_charset(charset, file_charset, config["symbol_prefix"] + "_charset_top")
                    charset = Charset(128, (0, 0))
                    setup_charset(charset, config, False)
                for x in range(0, int((config["screen_width"] - config["width"]) / 2)):
                    screen += 0xa0.to_bytes(1, byteorder="big")
                for x in range(0, config["width"]):
                    char_normal = int.from_bytes(file_normal.read(8), byteorder='big')
                    char_pressed = int.from_bytes(file_pressed.read(8), byteorder='big')
                    if char_normal == 0 and char_pressed == 0:
                        char_pressed = 0xffffffffffffffff
                    char = charset.add((char_normal, char_pressed))
                    # print("(%02d, %02d): (%016x, %016x) -> %d" % (x, y, char_normal, char_pressed, char))
                    screen += char.to_bytes(1, byteorder="big")
                for x in range(0, int((config["screen_width"] - config["width"] + 1) / 2)):
                    screen += 0xa0.to_bytes(1, byteorder="big")

    if "additional" in config:
        complete_charset = Charset(256, 0)
        for index, value in charset.by_index.items():
            complete_charset.add_with_index(value[0], index)
            complete_charset.add_with_index(value[1], index + 128)
        encoder = RunlengthEncoder.RunlengthEncoder()
        output = AssemblerOutput.AssemblerOutput("cc65", file_charset)

        output.data_section()

        for name in config["additional"]:
            additional = config["additional"][name]
            parts = []

            with open(additional["input"], "rb") as bitmap_file:
                for part in range(0, additional["num_parts"]):
                    for y in range(0, additional["height"]):
                        for x in range(0, additional["width"]):
                            char = int.from_bytes(bitmap_file.read(8), byteorder="big")
                            encoder.add(complete_charset.add(char))
                        if y != additional["height"] - 1:
                            encoder.skip(config["screen_width"] - additional["width"])
                    parts.append(encoder.end())

            output.parts(name, parts)

        if "segment" in config:
            segment = config["segment"]
            print(f".segment \"{segment}\"", file=file_charset)

        full = config["full_charset"] if "full_charset" in config else False
        data = b""
        for i in range(0, 256 if full else max(complete_charset.by_index.keys()) + 1):
            data += complete_charset.get_values(i).to_bytes(8, byteorder="big")
        name = config["symbol_prefix"] + ("_charset_bottom" if "top_lines" in config else "_charset")
        output.global_symbol(name)
        output.bytes(data)

    else:
        save_charset(charset, file_charset,
                     config["symbol_prefix"] + ("_charset_bottom" if "top_lines" in config else "_charset"))
        save(screen, config["screen"])
