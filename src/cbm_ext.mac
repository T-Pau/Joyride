;  cbm_ext.mac -- Macro pack for C64.
;  Copyright (C) 2020 Dieter Baron
;
;  This file is part of Joyride, a controller test program for C64.
;  The authors can be contacted at <joyride@tpau.group>.
;
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
;  1. Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
;  2. The names of the authors may not be used to endorse or promote
;     products derived from this software without specific prior
;     written permission.
;
;  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
;  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
;  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
;  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
;  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
;  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

.macro set_vic_bank base_address
    lda CIA2_PRA ; switch VIC bank
    and #$fc
    ora #((base_address >> 14) ^ 3)
    sta CIA2_PRA
.endmacro

.macro set_vic_text screen, charset
	lda #(((screen & $3c00) >> 6) | ((charset & $3800) >> 10))
	sta VIC_VIDEO_ADR
.endmacro

.macro set_vic_24_lines
	lda VIC_CTRL1
	and #$08 ^ $ff
	sta VIC_CTRL1
.endmacro

.macro set_vic_25_lines
	lda VIC_CTRL1
	ora #$08
	sta VIC_CTRL1
.endmacro

; Convert characters to inverse screen codes

; Macro that converts one character.
; invbyte() can be used as an instruction operand
.define invbyte(code)   (<(.strat ("h@dbdlhh", code >> 5) << 4) ^ code | $80)

; Helper macro that stores one character
.macro _invcode char
        .if (char < 256)
                .byte   invbyte {char}
        .else
                .error  "invcode: Character constant out of range"
        .endif
.endmacro

.macro  invcode arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9

        ; Bail out if next argument is empty
        .if     .blank ({arg1})
                .exitmacro
        .endif

        ; Check for a string
        .if     .match ({arg1}, "")

                ; Walk over all string chars
                .repeat .strlen (arg1), i
                        _invcode        {.strat (arg1, i)}
                .endrepeat

        ; Check for a number
        .elseif .match (.left (1, {arg1}), 0)

                ; Just output the number
                _invcode        arg1

        ; Check for a character
        .elseif .match (.left (1, {arg1}), 'a')

                ; Just output the character
                _invcode        arg1

        ; Anything else is an error
        .else
                .error  "invcode: invalid argument type"
        .endif

        ; Call the macro recursively with the remaining args
        invcode arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9
.endmacro
